@import './variables';

// @todo refactor breakpoints so they use the mixins from Gutenberg
// https://github.com/WordPress/gutenberg/blob/master/packages/base-styles/_mixins.scss
@mixin breakpoint( $sizes... ) {
	@each $size in $sizes {
		@if type-of( $size ) == string {
			$approved-value: 0;
			@each $breakpoint in $breakpoints {
				$and-larger: '>' + $breakpoint;
				$and-smaller: '<' + $breakpoint;

				@if $size == $and-smaller {
					$approved-value: 1;
					@media ( max-width: $breakpoint ) {
						@content;
					}
				} @else {
					@if $size == $and-larger {
						$approved-value: 2;
						@media ( min-width: $breakpoint + 1 ) {
							@content;
						}
					} @else {
						@each $breakpoint-end in $breakpoints {
							$range: $breakpoint + '-' + $breakpoint-end;
							@if $size == $range {
								$approved-value: 3;
								@media ( min-width: $breakpoint + 1 ) and ( max-width: $breakpoint-end ) {
									@content;
								}
							}
						}
					}
				}
			}
			@if $approved-value == 0 {
				$sizes: '';
				@each $breakpoint in $breakpoints {
					$sizes: $sizes + ' ' + $breakpoint;
				}
				@warn "ERROR in breakpoint(#{ $size }) : You can only use these sizes[ #{$sizes} ] using the following syntax [ <#{ nth($breakpoints, 1) } >#{ nth($breakpoints, 1) } #{ nth($breakpoints, 1) }-#{ nth($breakpoints, 2) } ]";
			}
		} @else {
			$sizes: '';
			@each $breakpoint in $breakpoints {
				$sizes: $sizes + ' ' + $breakpoint;
			}
			@error "ERROR in breakpoint(#{ $size }) : Please wrap the breakpoint $size in parenthesis. You can use these sizes[ #{$sizes} ] using the following syntax [ <#{ nth($breakpoints, 1) } >#{ nth($breakpoints, 1) } #{ nth($breakpoints, 1) }-#{ nth($breakpoints, 2) } ]";
		}
	}
}

// Adds animation to placeholder section
@mixin placeholder( $include-border-radius: true ) {
	outline: 0 !important;
	border: 0 !important;
	background-color: currentColor !important;
	color: currentColor !important;
	width: 100%;
	@if $include-border-radius == true {
		border-radius: 0.25rem;
	}
	display: block;
	line-height: 1;
	position: relative !important;
	overflow: hidden !important;
	max-width: 100% !important;
	pointer-events: none;
	box-shadow: none;
	z-index: 1; /* Necessary for overflow: hidden to work correctly in Safari */
	opacity: 0.15;

	// Forces direct descendants to keep layout but lose visibility.
	> * {
		visibility: hidden;
	}

	&::after {
		content: ' ';
		display: block;
		position: absolute;
		left: 0;
		right: 0;
		top: 0;
		height: 100%;
		background-repeat: no-repeat;
		background-image: linear-gradient(
			90deg,
			currentColor,
			#f5f5f54d,
			currentColor
		);
		transform: translateX( -100% );
		animation: loading__animation 1.5s ease-in-out infinite;
	}

	@media screen and ( prefers-reduced-motion: reduce ) {
		animation: none;
	}
}